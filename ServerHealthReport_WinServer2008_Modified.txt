#List of Server
$ServersListFile = "C:\users\$env:username\desktop\servers.txt"
$Servers = Get-Content -Path $ServersListFile -ErrorAction SilentlyContinue

# Intializing Array to store the object
$Array = @()

#Set a Threshold Value
$ThresholdValue = 90

#Polling Interval Count
$RepeatCount = 24

#Set Sleep Interval ( In Sec) 1 hour --> 3600 sec
$SleepInterval = 3600

#Intliazing the Counter
$Count = 0


#Running the whole script agin after one hour
ForEach($EachTime in $RepeatCount)
{

#Iterating Server List
ForEach($Server in $Servers)
{
    $Server = $Server.trim()
    Write-Host "$Server - " -ForegroundColor Green -NoNewline
 
      
    $TestPath = Test-Path "\\$Server\c$"
    
    #Testing Server Connection  
    If($TestPath -match "False")
    {
        Write-Host "ERROR:   Failed to connect"
        $Status               = "Offline"
        $LastBootUpTime       = "(Null)"
        $uptime               = "(Null)"
        $Processor            = "(Null)"
        $RoundMemory          = "(Null)"
        $up                   = "(Null)"
        $disk.'C PercentFree' = "(Null)"
        
        
    }
    Else
    {
        Write-Host "SUCCESS: Server is up"
        $Status = "Online"

        # Get OS details using WMI query
        $System = Get-WmiObject win32_operatingsystem | Select-Object LastBootUpTime,LocalDateTime,TotalVisibleMemorySize,FreePhysicalMemory
                      
        # Get bootup time and local date time  
        $LastBootUpTime = [Management.ManagementDateTimeConverter]::ToDateTime(($System).LastBootUpTime)
        $LocalDateTime  = [Management.ManagementDateTimeConverter]::ToDateTime(($System).LocalDateTime)
      
        # Calculate uptime - this is automatically a timespan
        $up = $LocalDateTime - $LastBootUpTime
        $uptime = "$($up.Days) days, $($up.Hours)h, $($up.Minutes)mins"
 
        # CPU utilization
        $Processor = (Get-WmiObject -ComputerName $Server -Class win32_processor -ErrorAction Stop | Measure-Object -Property LoadPercentage -Average | Select-Object Average).Average
  
        # Memory utilization
        $ComputerMemory =  Get-WmiObject -Class WIN32_OperatingSystem -ComputerName $Server
        $Memory = ((($ComputerMemory.TotalVisibleMemorySize - $ComputerMemory.FreePhysicalMemory)*100)/ $ComputerMemory.TotalVisibleMemorySize)
        $RoundMemory = [math]::Round($Memory, 2)

        #Disk Utilization
        $disk = Get-WmiObject -Class win32_Volume -ComputerName $Server -Filter "DriveLetter = 'C:'" | Select-object @{Name = "C PercentFree"; Expression = {“{0:N2}” -f  (($_.FreeSpace / $_.Capacity)*100) } }

    }
 
    #Checking that Utlization is above threshold value or not
    If(($Processor -ge $ThresholdValue) -or ($RoundMemory -ge $ThresholdValue) -or ($disk.'C PercentFree' -ge $ThresholdValue))
    {
        $Count += 1
    }  

    # Creating custom object
        $Object = New-Object PSObject -Property ([ordered]@{ 
    
                        "ServerName"             = $Server
                        "Status"                 = $Status
                        "BootUpTime"             = $LastBootUpTime
                        "UpTime"                 = $uptime
                        "CPUUtlization"          = $Processor
                        "MemoryUtilization%"    = $RoundMemory
                    "DiskUtlization" = $disk.'C PercentFree'
                                             
                    
        })
    # Add object to our array
    $Array += $Object 
}

### HTML REPORT ############################################################################################################################
# Creating head style
$Style = @"
      
    <style>
      body {
        font-family: "Arial";
        font-size: 8pt;
        color: #4C607B;
        }
      th, td { 
        border: 1px solid #e57300;
        border-collapse: collapse;
        padding: 5px;
        }
      th {
        font-size: 1.2em;
        text-align: left;
        background-color: #003366;
        color: #ffffff;
        }
      td {
        color: #000000;
        
        }
      .even { background-color: #ffffff; }
      .odd { background-color: #bfbfbf; }
    </style>
      
"@
# Creating head style and header title
$output = '<html><head>'

 
#Import hmtl style file
$output += $Style
$output += '</head><body>' 
$output += "<h3 style='color: #0B2161'>Server Health Report</h3>"
$output += '<strong><font color="red">WARNING: </font></strong>'
$output += "Please review attached report.</br>"
$output += '</br>'
$output += '<hr>'
$output += "<h4>Report of all the Server:</h4>"
$output += "
            <table>
                <tr>
                    <th>Server Name</th>
                    <th>Status</th>
                    <th>Boot Up Time</th>
                    <th>Up Time</th>
                    <th>CPU Utlization</th>
                    <th>Memory Utilization %</th>
                    <th>Disk Utlization</th>
                </tr>"
Foreach($Entry in $Array)
{
    If(($Entry.CPUUtlization -ge $ThresholdValue) -or ($Entry.'MemoryUtilization%' -ge $ThresholdValue) -or ($Entry.DiskUtlization -ge $ThresholdValue) )
    { 
        $output += "<tr bgcolor=red style = 'font-weight: bold'>"
    }
    Else 
    {
        $output += "<tr>"
    }

    $output += "
                 <td>$($Entry.ServerName)</td>
                 <td>$($Entry.Status)</td>
                 <td>$($Entry.BootUpTime)</td>
                 <td>$($Entry.UpTime)</td>
                 <td>$($Entry.CPUUtlization)</td>
                 <td>$($Entry.'MemoryUtilization%')</td>
                 <td>$($Entry.DiskUtlization)</td>
                 </tr>  "
    }

$output += "</table></body></html>"    
      

If($Array)
{ 
    Write-Host "`nResults" -ForegroundColor Yellow
 
    # Display results in console
    $Array | Sort-Object status | Format-Table -AutoSize -Wrap 
  
    #Display results in new window
    #$Array | Out-GridView
     
    # Save as CSV file
    #$Array | Export-Csv -Path C:\temp\results.csv -NoTypeInformation 

    # Save as Html File
    #$output  | out-file C:\Scripts\Test.htm 
}

#if threshold value reached for any single server
If($Count)
{

#Send email functionality from below line,  
$smtpServer = "yoursmtpserver.com"
$smtpFrom = "fromemailaddress@test.com"
$smtpTo = "receipentaddress@test.com"
$messageSubject = "[Servers Health Report] $(Get-Date -Format "yyyy-MM-dd")|| CPU or Memory or Disk Utilization is more than $ThresholdValue %"
$message = New-Object System.Net.Mail.MailMessage $smtpfrom, $smtpto
$message.Subject = $messageSubject
$message.IsBodyHTML = $true
$message.Body = "$output"
$smtp = New-Object Net.Mail.SmtpClient($smtpServer)
$smtp.Send($message) 

}


Start-Sleep $SleepInterval

}